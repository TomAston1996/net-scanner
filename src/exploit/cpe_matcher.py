#  _   _      _    _____                                 
# | \ | |    | |  / ____|                                
# |  \| | ___| |_| (___   ___ __ _ _ __  _ __   ___ _ __ 
# | . ` |/ _ \ __|\___ \ / __/ _` | '_ \| '_ \ / _ \ '__|
# | |\  |  __/ |_ ____) | (_| (_| | | | | | | |  __/ |   
# |_| \_|\___|\__|_____/ \___\__,_|_| |_|_| |_|\___|_| 
'''
File: cpe_matcher.py
Brief: match cpe values found from nmap scan with valid cpe search criterian from nist database
Author: Tom Aston
'''

import os
import requests

from src.logger import Log

NVD_API_KEY = os.environ['NVD_API_KEY']

class CpeMatcher():
    '''
    Brief: CpeMatcher is responsible for finding valid CPE strings from the NVD database based on NMAP CPE strings
    '''
    log = Log.get_instance()

    BASE_URL = 'https://services.nvd.nist.gov/rest/json/cpematch/2.0?'
    
    def get_cpe_criteria_match(self, cpe_str: str) -> list[str]:
        '''
        Brief: search the nist cpe database for matches
        '''
        if len(cpe_str) < 5: return []

        cpe_str = self.__format_cpe_string_from_nmap(cpe_str)

        self.log.log_info(f'searching nvd matches for cpe: {cpe_str}', self.__class__.__name__)

        headers = { "apiKey": NVD_API_KEY }
        params = { "matchStringSearch": cpe_str }

        try:
            response = requests.get(
                url=self.BASE_URL,
                headers=headers,
                params=params
            )

            response.raise_for_status()

            return self.__cpe_response_to_list(response.json())
        
        except requests.HTTPError as exc:
            self.log.log_error(
                1,
                f'Status Code: {str(exc.response.status_code)}',
                self.__class__.__name__, 
                exc,
                f'CPE String: {cpe_str}'
            )

            return []

    def __format_cpe_string_from_nmap(self, cpe_str: str) -> str:
        '''
        Brief: replace first occurance of a '/' with '2.3:' to meet NVD api formatting criteria for cpe searches
        Original: "cpe:/a:realvnc:realvnc:::enterprise"
        Modified: "cpe:2.3:a:realvnc:realvnc:::enterprise"
        '''
        return cpe_str.replace("/", "2.3:")
    
    def __cpe_response_to_list(self, response: dict) -> list[str]:
        '''
        Brief: convert cpe match string search to list of valid strings
        '''
        matchStrings = response["matchStrings"]

        valid_cpe_strings = []

        for match in matchStrings:
            self.log.log_info(f'valid cpe criteria found: {match["matchString"]["criteria"]}', self.__class__.__name__)
            valid_cpe_strings.append(match["matchString"]["criteria"])

        return valid_cpe_strings
        