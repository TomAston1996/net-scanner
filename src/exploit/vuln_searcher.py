#  _   _      _    _____                                 
# | \ | |    | |  / ____|                                
# |  \| | ___| |_| (___   ___ __ _ _ __  _ __   ___ _ __ 
# | . ` |/ _ \ __|\___ \ / __/ _` | '_ \| '_ \ / _ \ '__|
# | |\  |  __/ |_ ____) | (_| (_| | | | | | | |  __/ |   
# |_| \_|\___|\__|_____/ \___\__,_|_| |_|_| |_|\___|_| 
'''
File: vuln_searcher.py
Brief: search for vulternabities based on CPE
Author: Tom Aston
'''
import os
import json

from src.scan.iscanner import IScanner
from src.report.ireport_generator import IReportGenerator

from src.exploit.cpe_matcher import CpeMatcher
from src.types.types import HostInfo
from src.types.types import PortInfo

NVD_API_KEY = os.environ['NVD_API_KEY']

class VulnSearcher():
    '''
    '''
    cpeMatcher = CpeMatcher()

    BASE_URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0?'

    CPE_MATCH_ENDPOINT = 'cpematch/2.0?'

    host_info = []

    def __init__(self, scanner: IScanner, report_generator: IReportGenerator):
        '''
        '''
        self.scanner = scanner

        self.report_generator = report_generator

    def scan_hosts(self) -> None:
        '''
        '''
        host_info: list[HostInfo] = self.scanner.get_host_info()

        self.list_to_txt(host_info, 'test2')
    
        self.host_info = host_info

    
    def search_vulnerability_on_cpe_criteria(self) -> list[str]:
        '''
        '''
        for host in self.host_info:
            for port in host['ports']:
                self.cpeMatcher.get_cpe_criteria_match(port['port_cpe'])

    def list_to_txt(self, ls: list, file_name: str) -> None:
        '''
        Brief: dictionary to txt file
        '''
        with open(f'./local/{file_name}.txt', "w") as outfile:
            for item in ls:
                outfile.write(f'{str(item)}\n')

    
    
